import os
import pandas as pd
from datetime import datetime
from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from airflow.operators.postgres_operator import PostgresOperator
from airflow.operators.bash_operator import BashOperator
from airflow.operators.dummy_operator import DummyOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook

default_args = {
    'owner': 'Sanvi',
    'depends_on_past': False,
    'start_date': datetime(2023, 3, 21),
    
}

dag = DAG(
    'csv_to_postgres',
    default_args=default_args,
    description='Extracts CSV files, transforms data, loads to PostgreSQL',
    schedule_interval=None,
)

def extract_data():
    url_1 = 'https://github.com/rizqinugroho/sample-data/blob/main/USW00023169-LAS_VEGAS_MCCARRAN_INTL_AP-precipitation-inch.csv'
    url_2 = 'https://github.com/rizqinugroho/sample-data/blob/main/USW00023169-temperature-degreeF.csv'
    df1 = pd.read_csv(url_1)
    df2 = pd.read_csv(url_2)
    return [df1, df2]

def transform_data():
    dataframes = ti.xcom_pull(key=None, task_ids=['extract_data'])
    df1 = dataframes[0]
    df2 = dataframes[1]
    df1['date'] = pd.to_datetime(df1['date'], format='%Y-%m-%d')
    df2['date'] = pd.to_datetime(df2['date'], format='%Y-%m-%d')
    return [df1, df2]

def load_data():
    dataframes = ti.xcom_pull(key=None, task_ids=['transform_data'])
    df1 = dataframes[0]
    df2 = dataframes[1]
    hook = PostgresHook(postgres_conn_id='postgres_default')
    hook.bulk_load('table_name_1', df1)
    hook.bulk_load('table_name_2', df2)

with dag:
    start = DummyOperator(task_id='start')
    
    extract = PythonOperator(
        task_id='extract_data',
        python_callable=extract_data
    )
    
    transform = PythonOperator(
        task_id='transform_data',
        python_callable=transform_data
    )
    
    load = PythonOperator(
        task_id='load_data',
        python_callable=load_data
    )
    
    create_table_1 = PostgresOperator(
        task_id='create_table_1',
        postgres_conn_id='postgres_default',
        sql="""
        CREATE TABLE IF NOT EXISTS table_name_1 (
            date DATE,
            value FLOAT
        );
        """
    )
    
    create_table_2 = PostgresOperator(
        task_id='create_table_2',
        postgres_conn_id='postgres_default',
        sql="""
        CREATE TABLE IF NOT EXISTS table_name_2 (
            date DATE,
            value FLOAT
        );
        """
    )
    
    end = DummyOperator(task_id='end')
    
    start >> extract >> transform >> load >> [create_table_1, create_table_2] >> end
